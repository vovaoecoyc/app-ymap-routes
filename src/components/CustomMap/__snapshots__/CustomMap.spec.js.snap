// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CustomMap container CustomMap container initial CustomMap initial snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CustomMap
    points={
      Array [
        Object {
          "coordinates": Array [
            55.1,
            38.1,
          ],
          "name": "Name Point1",
        },
        Object {
          "coordinates": Array [
            55.2,
            38.2,
          ],
          "name": "Name Point2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <withYMapsContext(withYMaps(Map))
        height="100%"
        instanceRef={[Function]}
        onLoad={[Function]}
        state={
          Object {
            "center": Array [
              55.754734,
              37.583314,
            ],
            "zoom": 7,
          }
        }
        width="100%"
      >
        <withParentContext(withYMapsContext(withYMaps(Placemark)))
          geometry={
            Array [
              55.1,
              38.1,
            ]
          }
          modules={
            Array [
              "geoObject.addon.balloon",
              "geoObject.addon.hint",
            ]
          }
          onDragend={[Function]}
          options={
            Object {
              "draggable": true,
            }
          }
          properties={
            Object {
              "balloonContent": "Name Point1",
              "iconContent": 1,
            }
          }
        />
        <withParentContext(withYMapsContext(withYMaps(Placemark)))
          geometry={
            Array [
              55.2,
              38.2,
            ]
          }
          modules={
            Array [
              "geoObject.addon.balloon",
              "geoObject.addon.hint",
            ]
          }
          onDragend={[Function]}
          options={
            Object {
              "draggable": true,
            }
          }
          properties={
            Object {
              "balloonContent": "Name Point2",
              "iconContent": 2,
            }
          }
        />
        <withParentContext(withYMapsContext(withYMaps(Polyline)))
          geometry={
            Array [
              Array [
                55.1,
                38.1,
              ],
              Array [
                55.2,
                38.2,
              ],
            ]
          }
        />
      </withYMapsContext(withYMaps(Map))>,
      "enterprise": false,
      "preload": false,
      "query": Object {
        "lang": "ru_RU",
        "load": "",
        "ns": "",
      },
      "version": "2.1",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          Array [
            <withParentContext(withYMapsContext(withYMaps(Placemark)))
              geometry={
                Array [
                  55.1,
                  38.1,
                ]
              }
              modules={
                Array [
                  "geoObject.addon.balloon",
                  "geoObject.addon.hint",
                ]
              }
              onDragend={[Function]}
              options={
                Object {
                  "draggable": true,
                }
              }
              properties={
                Object {
                  "balloonContent": "Name Point1",
                  "iconContent": 1,
                }
              }
            />,
            <withParentContext(withYMapsContext(withYMaps(Placemark)))
              geometry={
                Array [
                  55.2,
                  38.2,
                ]
              }
              modules={
                Array [
                  "geoObject.addon.balloon",
                  "geoObject.addon.hint",
                ]
              }
              onDragend={[Function]}
              options={
                Object {
                  "draggable": true,
                }
              }
              properties={
                Object {
                  "balloonContent": "Name Point2",
                  "iconContent": 2,
                }
              }
            />,
          ],
          <withParentContext(withYMapsContext(withYMaps(Polyline)))
            geometry={
              Array [
                Array [
                  55.1,
                  38.1,
                ],
                Array [
                  55.2,
                  38.2,
                ],
              ]
            }
          />,
        ],
        "height": "100%",
        "instanceRef": [Function],
        "onLoad": [Function],
        "state": Object {
          "center": Array [
            55.754734,
            37.583314,
          ],
          "zoom": 7,
        },
        "width": "100%",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "function",
          "props": Object {
            "geometry": Array [
              55.1,
              38.1,
            ],
            "modules": Array [
              "geoObject.addon.balloon",
              "geoObject.addon.hint",
            ],
            "onDragend": [Function],
            "options": Object {
              "draggable": true,
            },
            "properties": Object {
              "balloonContent": "Name Point1",
              "iconContent": 1,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "geometry": Array [
              55.2,
              38.2,
            ],
            "modules": Array [
              "geoObject.addon.balloon",
              "geoObject.addon.hint",
            ],
            "onDragend": [Function],
            "options": Object {
              "draggable": true,
            },
            "properties": Object {
              "balloonContent": "Name Point2",
              "iconContent": 2,
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "geometry": Array [
              Array [
                55.1,
                38.1,
              ],
              Array [
                55.2,
                38.2,
              ],
            ],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <withYMapsContext(withYMaps(Map))
          height="100%"
          instanceRef={[Function]}
          onLoad={[Function]}
          state={
            Object {
              "center": Array [
                55.754734,
                37.583314,
              ],
              "zoom": 7,
            }
          }
          width="100%"
        >
          <withParentContext(withYMapsContext(withYMaps(Placemark)))
            geometry={
              Array [
                55.1,
                38.1,
              ]
            }
            modules={
              Array [
                "geoObject.addon.balloon",
                "geoObject.addon.hint",
              ]
            }
            onDragend={[Function]}
            options={
              Object {
                "draggable": true,
              }
            }
            properties={
              Object {
                "balloonContent": "Name Point1",
                "iconContent": 1,
              }
            }
          />
          <withParentContext(withYMapsContext(withYMaps(Placemark)))
            geometry={
              Array [
                55.2,
                38.2,
              ]
            }
            modules={
              Array [
                "geoObject.addon.balloon",
                "geoObject.addon.hint",
              ]
            }
            onDragend={[Function]}
            options={
              Object {
                "draggable": true,
              }
            }
            properties={
              Object {
                "balloonContent": "Name Point2",
                "iconContent": 2,
              }
            }
          />
          <withParentContext(withYMapsContext(withYMaps(Polyline)))
            geometry={
              Array [
                Array [
                  55.1,
                  38.1,
                ],
                Array [
                  55.2,
                  38.2,
                ],
              ]
            }
          />
        </withYMapsContext(withYMaps(Map))>,
        "enterprise": false,
        "preload": false,
        "query": Object {
          "lang": "ru_RU",
          "load": "",
          "ns": "",
        },
        "version": "2.1",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            Array [
              <withParentContext(withYMapsContext(withYMaps(Placemark)))
                geometry={
                  Array [
                    55.1,
                    38.1,
                  ]
                }
                modules={
                  Array [
                    "geoObject.addon.balloon",
                    "geoObject.addon.hint",
                  ]
                }
                onDragend={[Function]}
                options={
                  Object {
                    "draggable": true,
                  }
                }
                properties={
                  Object {
                    "balloonContent": "Name Point1",
                    "iconContent": 1,
                  }
                }
              />,
              <withParentContext(withYMapsContext(withYMaps(Placemark)))
                geometry={
                  Array [
                    55.2,
                    38.2,
                  ]
                }
                modules={
                  Array [
                    "geoObject.addon.balloon",
                    "geoObject.addon.hint",
                  ]
                }
                onDragend={[Function]}
                options={
                  Object {
                    "draggable": true,
                  }
                }
                properties={
                  Object {
                    "balloonContent": "Name Point2",
                    "iconContent": 2,
                  }
                }
              />,
            ],
            <withParentContext(withYMapsContext(withYMaps(Polyline)))
              geometry={
                Array [
                  Array [
                    55.1,
                    38.1,
                  ],
                  Array [
                    55.2,
                    38.2,
                  ],
                ]
              }
            />,
          ],
          "height": "100%",
          "instanceRef": [Function],
          "onLoad": [Function],
          "state": Object {
            "center": Array [
              55.754734,
              37.583314,
            ],
            "zoom": 7,
          },
          "width": "100%",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "function",
            "props": Object {
              "geometry": Array [
                55.1,
                38.1,
              ],
              "modules": Array [
                "geoObject.addon.balloon",
                "geoObject.addon.hint",
              ],
              "onDragend": [Function],
              "options": Object {
                "draggable": true,
              },
              "properties": Object {
                "balloonContent": "Name Point1",
                "iconContent": 1,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "geometry": Array [
                55.2,
                38.2,
              ],
              "modules": Array [
                "geoObject.addon.balloon",
                "geoObject.addon.hint",
              ],
              "onDragend": [Function],
              "options": Object {
                "draggable": true,
              },
              "properties": Object {
                "balloonContent": "Name Point2",
                "iconContent": 2,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "geometry": Array [
                Array [
                  55.1,
                  38.1,
                ],
                Array [
                  55.2,
                  38.2,
                ],
              ],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
